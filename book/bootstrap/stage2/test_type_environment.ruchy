// BOOTSTRAP-010: Type Environment (RED Phase)
// Test-driven development: Write failing tests first

// Placeholder type environment (to be implemented in GREEN phase)
fun create_env() -> i32 {
    0
}

fun bind_var(env_id: i32, name: String, type_id: i32) -> i32 {
    env_id
}

fun lookup_var(env_id: i32, name: String) -> i32 {
    -1
}

// Test 1: Create empty environment
fun test_create_environment() -> bool {
    println("Test 1: Create empty environment");
    let env = create_env();
    if env >= 0 {
        println("  ✅ PASS: Environment created");
        true
    } else {
        println("  ❌ FAIL: Failed to create environment");
        false
    }
}

// Test 2: Bind variable to type
fun test_bind_variable() -> bool {
    println("Test 2: Bind variable to type");
    let env = create_env();
    let env2 = bind_var(env, "x".to_string(), 1);
    let found_type = lookup_var(env2, "x".to_string());
    if found_type == 1 {
        println("  ✅ PASS: Variable bound successfully");
        true
    } else {
        println("  ❌ FAIL: Expected type 1, got {}", found_type);
        false
    }
}

// Test 3: Lookup unknown variable
fun test_lookup_unknown() -> bool {
    println("Test 3: Lookup unknown variable");
    let env = create_env();
    let result = lookup_var(env, "unknown".to_string());
    if result == -1 {
        println("  ✅ PASS: Unknown variable returns -1");
        true
    } else {
        println("  ❌ FAIL: Expected -1, got {}", result);
        false
    }
}

fun main() {
    println("🔴 BOOTSTRAP-010: Type Environment (RED Phase)");
    println("==============================================");
    println("");

    let mut passed = 0;
    let mut failed = 0;

    if test_create_environment() {
        passed = passed + 1;
    } else {
        failed = failed + 1;
    }

    if test_bind_variable() {
        passed = passed + 1;
    } else {
        failed = failed + 1;
    }

    if test_lookup_unknown() {
        passed = passed + 1;
    } else {
        failed = failed + 1;
    }

    println("");
    println("📊 RED Phase Results: {} passed, {} failed", passed, failed);
    println("");

    if failed > 0 {
        println("🔴 RED: Tests failing as expected (TDD)");
    }
}

main();
