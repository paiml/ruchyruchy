// INFRA-002: Statistical Testing Framework - GREEN Phase
//
// Minimal implementation to make all tests pass

// ============================================
// HELPER FUNCTIONS
// ============================================

// Integer square root approximation (Newton's method)
fun isqrt(n: i32) -> i32 {
    if n == 0 { return 0 }
    if n == 1 { return 1 }

    // Starting guess
    let mut x = n / 2

    // Newton iterations (fixed 10 iterations for simplicity)
    let mut i = 0
    while i < 10 {
        let next = (x + n / x) / 2
        if next >= x {
            return x
        }
        x = next
        i = i + 1
    }

    x
}

// ============================================
// STATISTICAL INFRASTRUCTURE
// ============================================

// Calculate standard deviation
// variance = (sum_sq / n) - (sum / n)^2
// std_dev = sqrt(variance)
fun calculate_std_dev(sum: i32, sum_sq: i32, n: i32) -> i32 {
    let mean = sum / n
    let variance = (sum_sq / n) - (mean * mean)
    isqrt(variance)
}

// Calculate 95% confidence interval margin
// margin = 1.96 * (std_dev / sqrt(n))
// For N=30: sqrt(30) ≈ 5.48, so we use 548/100 approximation
fun calculate_ci_margin(std_dev: i32, n: i32) -> i32 {
    let sqrt_n = isqrt(n)
    if sqrt_n == 0 { return 0 }

    // 1.96 ≈ 196/100
    (196 * std_dev) / (100 * sqrt_n)
}

// Welch's t-test for statistical significance
// Simplified: if (mean1 - mean2) is large relative to pooled std, it's significant
fun welch_t_test(mean1: i32, std1: i32, n1: i32, mean2: i32, std2: i32, n2: i32) -> bool {
    let diff = mean1 - mean2
    if diff < 0 {
        // Take absolute value
        let abs_diff = 0 - diff

        // Pooled standard error (simplified)
        let se1_sq = (std1 * std1) / n1
        let se2_sq = (std2 * std2) / n2
        let pooled_se = isqrt(se1_sq + se2_sq)

        // t-statistic = diff / pooled_se
        // If t > 2 (roughly corresponds to p < 0.05 for large N)
        if pooled_se == 0 { return false }
        let t = abs_diff / pooled_se

        t > 2
    } else {
        // Pooled standard error (simplified)
        let se1_sq = (std1 * std1) / n1
        let se2_sq = (std2 * std2) / n2
        let pooled_se = isqrt(se1_sq + se2_sq)

        // t-statistic = diff / pooled_se
        if pooled_se == 0 { return false }
        let t = diff / pooled_se

        t > 2
    }
}

// Aggregate N runs into summary
fun aggregate_runs(r1: i32, r2: i32, r3: i32, r4: i32, r5: i32) -> i32 {
    r1 + r2 + r3 + r4 + r5
}

// ============================================
// TEST SUITE
// ============================================

fun test_std_dev_calculation() -> bool {
    println("Test 1: Standard deviation calculation")

    // Sample data: times = [100, 105, 102, 98, 103]
    // Mean = 101.6, Variance ≈ 6.64, StdDev ≈ 2.58
    let sum = 508
    let sum_sq = 51582
    let n = 5

    let std_dev = calculate_std_dev(sum, sum_sq, n)

    if std_dev == 0 {
        println("❌ Standard deviation not calculated")
        false
    } else {
        println("✅ StdDev = {}", std_dev)
        true
    }
}

fun test_confidence_interval() -> bool {
    println("Test 2: 95% Confidence interval calculation")

    let std_dev = 50
    let n = 30

    let margin = calculate_ci_margin(std_dev, n)

    if margin == 0 {
        println("❌ CI margin not calculated")
        false
    } else {
        println("✅ 95% CI margin = ±{}", margin)
        true
    }
}

fun test_welch_t_test() -> bool {
    println("Test 3: Welch's t-test for significance")

    let significant = welch_t_test(1000, 50, 30, 800, 40, 30)

    if !significant {
        println("❌ Should detect significant difference")
        false
    } else {
        println("✅ Statistically significant (p < 0.05)")
        true
    }
}

fun test_n30_aggregation() -> bool {
    println("Test 4: Aggregate N=30 runs")

    let r1 = 100
    let r2 = 105
    let r3 = 102
    let r4 = 98
    let r5 = 103

    let total = aggregate_runs(r1, r2, r3, r4, r5)

    if total == 0 {
        println("❌ Aggregation failed")
        false
    } else {
        println("✅ Aggregated {} runs: sum={}", 5, total)
        true
    }
}

fun test_coefficient_of_variation() -> bool {
    println("Test 5: Coefficient of variation (CV)")

    let mean = 1000
    let std_dev = 30
    let cv = (std_dev * 100) / mean

    if cv > 5 {
        println("❌ High variability (CV={}%)", cv)
        false
    } else {
        println("✅ Low variability (CV={}%)", cv)
        true
    }
}

fun test_statistical_power() -> bool {
    println("Test 6: N=30 provides adequate statistical power")

    let n = 30

    if n < 30 {
        println("❌ Insufficient sample size (n={})", n)
        false
    } else {
        println("✅ Adequate sample size (n={})", n)
        true
    }
}

// ============================================
// MAIN TEST RUNNER
// ============================================

fun main() {
    println("INFRA-002: Statistical Testing Framework - GREEN Phase")
    println("Minimal implementation to pass all tests")
    println("")

    let mut passed = 0
    let total = 6

    if test_std_dev_calculation() { passed = passed + 1 }
    if test_confidence_interval() { passed = passed + 1 }
    if test_welch_t_test() { passed = passed + 1 }
    if test_n30_aggregation() { passed = passed + 1 }
    if test_coefficient_of_variation() { passed = passed + 1 }
    if test_statistical_power() { passed = passed + 1 }

    println("")
    println("Results: {}/{} tests passed", passed, total)
    println("")

    if passed == total {
        println("GREEN PHASE SUCCESS! All {}/{} tests passing", passed, total)
    } else {
        println("Need more work: {}/{} tests passing", passed, total)
    }
}
