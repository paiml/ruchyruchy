// DEBUGGER-001: DAP Server Skeleton (GREEN Phase)
// Tests demonstrate DAP server working

fun test_dap_server_initialization() -> bool {
    println("🧪 DEBUGGER-001: DAP Server Initialization (GREEN Phase)");
    println("");

    let mut server = DAPServer::new(4711);

    // Test server starts
    let started = server.start();
    if !started {
        println("❌ Server failed to start");
        return false;
    }

    // Test server is running
    if !server.is_running {
        println("❌ Server not running after start()");
        return false;
    }

    println("✅ DAP server initialized successfully");
    println("");

    server.stop();
    true
}

fun test_dap_server_accepts_connection() -> bool {
    println("🧪 DEBUGGER-001: DAP Server Connection (GREEN Phase)");
    println("");

    let mut server = DAPServer::new(4711);
    server.start();

    // Test connection acceptance
    let connected = server.accept_connection();
    if !connected {
        println("❌ Failed to accept connection");
        return false;
    }

    println("✅ DAP server accepted connection");
    println("");

    server.stop();
    true
}

fun test_dap_server_handles_initialize_request() -> bool {
    println("🧪 DEBUGGER-001: DAP Initialize Request (GREEN Phase)");
    println("");

    let mut server = DAPServer::new(4711);
    server.start();
    server.accept_connection();

    // Create initialize request
    let request = create_initialize_request(
        1,
        "vscode".to_string(),
        "ruchyruchy".to_string()
    );

    // Handle initialize request
    let response = server.handle_initialize(request);

    // Verify response
    if !response.success {
        println("❌ Initialize request failed");
        return false;
    }

    if !response.supports_configuration_done {
        println("❌ Missing capability: supportsConfigurationDoneRequest");
        return false;
    }

    if response.request_seq != 1 {
        println("❌ Wrong request_seq: expected 1, got {}", response.request_seq);
        return false;
    }

    // Test JSON formatting
    let json = server.format_initialize_response(response);
    println("Response JSON:");
    println("{}", json);
    println("");

    // Verify server is ready
    if !server.is_ready() {
        println("❌ Server not ready after initialization");
        return false;
    }

    println("✅ DAP initialize request handled correctly");
    println("");

    server.stop();
    true
}

fun main() {
    println("============================================================");
    println("DEBUGGER-001: DAP Server Skeleton Test Suite (GREEN Phase)");
    println("============================================================");
    println("");

    let test1 = test_dap_server_initialization();
    let test2 = test_dap_server_accepts_connection();
    let test3 = test_dap_server_handles_initialize_request();

    let all_passed = test1 && test2 && test3;

    println("");
    println("============================================================");
    if all_passed {
        println("✅ GREEN PHASE COMPLETE: All tests passed!");
        println("");
        println("DAP Server Features Working:");
        println("  ✅ Server initialization");
        println("  ✅ Connection acceptance");
        println("  ✅ Initialize request handling");
        println("  ✅ JSON-RPC response formatting");
        println("  ✅ Capability negotiation");
    } else {
        println("❌ Some tests failed");
    }
    println("============================================================");
}

main();
