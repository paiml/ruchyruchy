// BOOTSTRAP-012: Algorithm W Implementation (GREEN Phase - FULL)
// Now possible thanks to Issue #39 fix in Ruchy v3.99.1!

// Type representations
enum Type {
    TInt,
    TBool,
    TString,
    TVar(String),
    TFun(Box<Type>, Box<Type>)
}

// Type scheme for polymorphic types
enum Scheme {
    Mono(Type),
    Poly(String, Type)
}

// Type environment
enum TypeEnv {
    Empty,
    Extend(String, Scheme, Box<TypeEnv>)
}

// Expression AST
enum Expr {
    EInt(i32),
    EBool(bool),
    EVar(String),
    ELam(String, Box<Expr>),
    EApp(Box<Expr>, Box<Expr>),
    ELet(String, Box<Expr>, Box<Expr>)
}

// Type inference result
enum InferResult {
    Success(Type),
    Failure(String)
}

// Fresh variable counter
let mut var_counter = 0;

// Generate fresh type variable
fun fresh_var() -> Type {
    let name = if var_counter == 0 {
        "a".to_string()
    } else if var_counter == 1 {
        "b".to_string()
    } else if var_counter == 2 {
        "c".to_string()
    } else {
        "d".to_string()
    };
    var_counter = var_counter + 1;
    Type::TVar(name)
}

// Lookup variable in environment - NOW WORKS WITH v3.99.1!
fun env_lookup(env: TypeEnv, name: String) -> InferResult {
    match env {
        TypeEnv::Empty => InferResult::Failure("Unbound variable".to_string()),
        TypeEnv::Extend(var, scheme, rest) => {
            if var == name {
                match scheme {
                    Scheme::Mono(t) => InferResult::Success(t),
                    Scheme::Poly(tvar, t) => InferResult::Success(t)
                }
            } else {
                env_lookup(*rest, name)
            }
        }
    }
}

// Algorithm W: Type inference
fun infer(env: TypeEnv, expr: Expr) -> InferResult {
    match expr {
        Expr::EInt(n) => InferResult::Success(Type::TInt),
        Expr::EBool(b) => InferResult::Success(Type::TBool),
        Expr::EVar(name) => env_lookup(env, name),
        Expr::ELam(param, body) => infer_lambda(env, param, *body),
        Expr::EApp(func, arg) => infer_app(env, *func, *arg),
        Expr::ELet(var, val, body) => infer_let(env, var, *val, *body)
    }
}

// Infer lambda type
fun infer_lambda(env: TypeEnv, param: String, body: Expr) -> InferResult {
    let param_type = fresh_var();
    let new_env = TypeEnv::Extend(param, Scheme::Mono(param_type), Box::new(env));
    let body_result = infer(new_env, body);

    match body_result {
        InferResult::Success(body_type) => {
            InferResult::Success(Type::TFun(Box::new(param_type), Box::new(body_type)))
        },
        InferResult::Failure(msg) => InferResult::Failure(msg)
    }
}

// Infer application type
fun infer_app(env: TypeEnv, func: Expr, arg: Expr) -> InferResult {
    let func_result = infer(env, func);

    match func_result {
        InferResult::Success(func_type) => {
            match func_type {
                Type::TFun(param_type, ret_type) => InferResult::Success(*ret_type),
                _ => InferResult::Failure("Not a function".to_string())
            }
        },
        InferResult::Failure(msg) => InferResult::Failure(msg)
    }
}

// Infer let expression
fun infer_let(env: TypeEnv, var_name: String, val: Expr, body: Expr) -> InferResult {
    let val_result = infer(env, val);

    match val_result {
        InferResult::Success(val_type) => {
            let new_env = TypeEnv::Extend(var_name, Scheme::Mono(val_type), Box::new(env));
            infer(new_env, body)
        },
        InferResult::Failure(msg) => InferResult::Failure(msg)
    }
}

// GREEN Phase Tests
fun test_infer_int() -> bool {
    println("Test: Infer int");
    let result = infer(TypeEnv::Empty, Expr::EInt(42));
    match result {
        InferResult::Success(t) => {
            match t {
                Type::TInt => {
                    println("  ✅ PASS");
                    true
                },
                _ => {
                    println("  ❌ FAIL");
                    false
                }
            }
        },
        InferResult::Failure(msg) => {
            println("  ❌ FAIL: {}", msg);
            false
        }
    }
}

fun test_infer_bool() -> bool {
    println("Test: Infer bool");
    let result = infer(TypeEnv::Empty, Expr::EBool(true));
    match result {
        InferResult::Success(t) => {
            match t {
                Type::TBool => {
                    println("  ✅ PASS");
                    true
                },
                _ => {
                    println("  ❌ FAIL");
                    false
                }
            }
        },
        InferResult::Failure(msg) => {
            println("  ❌ FAIL: {}", msg);
            false
        }
    }
}

fun test_infer_var() -> bool {
    println("Test: Infer var");
    let env = TypeEnv::Extend("x".to_string(), Scheme::Mono(Type::TInt), Box::new(TypeEnv::Empty));
    let result = infer(env, Expr::EVar("x".to_string()));
    match result {
        InferResult::Success(t) => {
            match t {
                Type::TInt => {
                    println("  ✅ PASS");
                    true
                },
                _ => {
                    println("  ❌ FAIL");
                    false
                }
            }
        },
        InferResult::Failure(msg) => {
            println("  ❌ FAIL: {}", msg);
            false
        }
    }
}

fun test_infer_lambda() -> bool {
    println("Test: Infer lambda");
    var_counter = 0;
    let expr = Expr::ELam("x".to_string(), Box::new(Expr::EVar("x".to_string())));
    let result = infer(TypeEnv::Empty, expr);
    match result {
        InferResult::Success(t) => {
            match t {
                Type::TFun(arg, ret) => {
                    println("  ✅ PASS");
                    true
                },
                _ => {
                    println("  ❌ FAIL");
                    false
                }
            }
        },
        InferResult::Failure(msg) => {
            println("  ❌ FAIL: {}", msg);
            false
        }
    }
}

fun test_infer_app() -> bool {
    println("Test: Infer app");
    var_counter = 0;
    let lam = Expr::ELam("x".to_string(), Box::new(Expr::EVar("x".to_string())));
    let expr = Expr::EApp(Box::new(lam), Box::new(Expr::EInt(42)));
    let result = infer(TypeEnv::Empty, expr);
    match result {
        InferResult::Success(t) => {
            println("  ✅ PASS");
            true
        },
        InferResult::Failure(msg) => {
            println("  ❌ FAIL: {}", msg);
            false
        }
    }
}

fun test_unbound_var() -> bool {
    println("Test: Unbound var");
    let result = infer(TypeEnv::Empty, Expr::EVar("x".to_string()));
    match result {
        InferResult::Success(t) => {
            println("  ❌ FAIL");
            false
        },
        InferResult::Failure(msg) => {
            println("  ✅ PASS");
            true
        }
    }
}

fun main() {
    println("🟢 BOOTSTRAP-012: Algorithm W (GREEN Phase - FULL)");
    println("==================================================");
    println("Thanks to Issue #39 fix in Ruchy v3.99.1!");
    println("");

    let mut passed = 0;
    let mut failed = 0;

    if test_infer_int() {
        passed = passed + 1;
    } else {
        failed = failed + 1;
    }

    if test_infer_bool() {
        passed = passed + 1;
    } else {
        failed = failed + 1;
    }

    if test_infer_var() {
        passed = passed + 1;
    } else {
        failed = failed + 1;
    }

    if test_infer_lambda() {
        passed = passed + 1;
    } else {
        failed = failed + 1;
    }

    if test_infer_app() {
        passed = passed + 1;
    } else {
        failed = failed + 1;
    }

    if test_unbound_var() {
        passed = passed + 1;
    } else {
        failed = failed + 1;
    }

    println("");
    println("📊 Results: {} passed, {} failed", passed, failed);

    if failed == 0 {
        println("✅ GREEN: All 6/6 tests passing!");
        println("Algorithm W implementation COMPLETE!");
    }
}

main();
