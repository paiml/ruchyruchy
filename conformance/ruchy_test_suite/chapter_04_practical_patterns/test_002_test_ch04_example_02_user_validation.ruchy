// Test: test_ch04_example_02_user_validation
// Chapter: 04 - practical_patterns
// Description: Test case from chapter 4 - practical_patterns
//
// Expected Output:

fun validate_user_input(name: &str, age: i32, email: &str) -> bool {
    if name.len() == 0 {
        println("Error: Name cannot be empty");
        return false;
    }

    if age < 0 || age > 150 {
        println("Error: Age must be between 0 and 150");
        return false;
    }

    if !email.contains('@') {
        println("Error: Invalid email format");
        return false;
    }

    println("User input is valid");
    return true;
}

fun create_user_profile(name: &str, age: i32, email: &str) -> &str {
    if validate_user_input(name, age, email) {
        println("Creating profile for: {}", name);
        return "Profile created successfully";
    } else {
        return "Profile creation failed";
    }
}

fun main() {
    let result1 = create_user_profile("Alice", 25, "alice@example.com");
    let result2 = create_user_profile("", 30, "bob@example.com");
    let result3 = create_user_profile("Charlie", -5, "charlie@example.com");

    println("Result 1: {}", result1);
    println("Result 2: {}", result2);
    println("Result 3: {}", result3);
}
