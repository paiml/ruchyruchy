// Populate the sidebar
//
// This is a script, and not included directly in the page, to control the total size of the book.
// The TOC contains an entry for each page, so if each page includes a copy of the TOC,
// the total size of the page becomes O(n**2).
class MDBookSidebarScrollbox extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        this.innerHTML = '<ol class="chapter"><li class="chapter-item expanded affix "><a href="introduction.html">Introduction</a></li><li class="chapter-item expanded affix "><li class="part-title">Phase 1: Infrastructure &amp; Quality Gates</li><li class="chapter-item expanded "><a href="phase1_infrastructure/chapter.html"><strong aria-hidden="true">1.</strong> Infrastructure Framework</a><a class="toggle"><div>‚ù±</div></a></li><li><ol class="section"><li class="chapter-item "><a href="phase1_infrastructure/tickets/infra-001-roadmap.html"><strong aria-hidden="true">1.1.</strong> INFRA-001: YAML Roadmap System</a></li><li class="chapter-item "><a href="phase1_infrastructure/tickets/infra-002-quality-gates.html"><strong aria-hidden="true">1.2.</strong> INFRA-002: Pre-commit Quality Gates</a></li><li class="chapter-item "><a href="phase1_infrastructure/tickets/infra-003-hooks.html"><strong aria-hidden="true">1.3.</strong> INFRA-003: Hook Automation</a></li><li class="chapter-item "><a href="phase1_infrastructure/tickets/infra-004-organization.html"><strong aria-hidden="true">1.4.</strong> INFRA-004: Test File Organization</a></li></ol></li><li class="chapter-item expanded "><li class="part-title">Phase 2: Validation &amp; Robustness</li><li class="chapter-item expanded "><a href="phase2_validation/chapter.html"><strong aria-hidden="true">2.</strong> Validation Framework</a><a class="toggle"><div>‚ù±</div></a></li><li><ol class="section"><li class="chapter-item "><a href="phase2_validation/tickets/valid-001-multi-target.html"><strong aria-hidden="true">2.1.</strong> VALID-001: Multi-Target Validation</a></li><li class="chapter-item "><a href="phase2_validation/tickets/valid-002-end-to-end-pipeline.html"><strong aria-hidden="true">2.2.</strong> VALID-002: End-to-End Pipeline Validation</a></li><li class="chapter-item "><a href="phase2_validation/tickets/valid-003-property-testing.html"><strong aria-hidden="true">2.3.</strong> VALID-003: Property-Based Testing Framework</a></li><li class="chapter-item "><a href="phase2_validation/tickets/valid-003-extended-enhanced-testing.html"><strong aria-hidden="true">2.4.</strong> VALID-003-EXTENDED: Enhanced Property Testing</a></li><li class="chapter-item "><a href="phase2_validation/tickets/valid-004-fuzz-testing-execution.html"><strong aria-hidden="true">2.5.</strong> VALID-004: Fuzz Testing Execution</a></li><li class="chapter-item "><a href="phase2_validation/tickets/valid-005-boundary-analysis.html"><strong aria-hidden="true">2.6.</strong> VALID-005: Boundary Analysis</a></li></ol></li><li class="chapter-item expanded "><li class="part-title">Phase 3: Bootstrap Compiler</li><li class="chapter-item expanded "><a href="phase3_bootstrap/chapter.html"><strong aria-hidden="true">3.</strong> Bootstrap Stage 0: Lexer</a><a class="toggle"><div>‚ù±</div></a></li><li><ol class="section"><li class="chapter-item "><a href="phase3_bootstrap/stage0/bootstrap-001-token-types.html"><strong aria-hidden="true">3.1.</strong> BOOTSTRAP-001: Token Type Definitions</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage0/bootstrap-002-char-stream.html"><strong aria-hidden="true">3.2.</strong> BOOTSTRAP-002: Character Stream Processing</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage0/bootstrap-003-core-lexer.html"><strong aria-hidden="true">3.3.</strong> BOOTSTRAP-003: Core Lexer Implementation</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage0/bootstrap-004-error-recovery.html"><strong aria-hidden="true">3.4.</strong> BOOTSTRAP-004: Error Recovery Mechanisms</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage0/bootstrap-005-self-tokenization.html"><strong aria-hidden="true">3.5.</strong> BOOTSTRAP-005: Self-Tokenization Test</a></li></ol></li><li class="chapter-item expanded "><a href="phase3_bootstrap/stage1/chapter.html"><strong aria-hidden="true">4.</strong> Bootstrap Stage 1: Parser</a><a class="toggle"><div>‚ù±</div></a></li><li><ol class="section"><li class="chapter-item "><a href="phase3_bootstrap/stage1/bootstrap-006-recursive-ast.html"><strong aria-hidden="true">4.1.</strong> BOOTSTRAP-006: Full Recursive AST</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage1/bootstrap-007-pratt-parser.html"><strong aria-hidden="true">4.2.</strong> BOOTSTRAP-007: Pratt Parser</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage1/bootstrap-008-statement-parser.html"><strong aria-hidden="true">4.3.</strong> BOOTSTRAP-008: Statement Parser</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage1/bootstrap-009-roundtrip-validation.html"><strong aria-hidden="true">4.4.</strong> BOOTSTRAP-009: Parser Roundtrip Validation</a></li></ol></li><li class="chapter-item expanded "><a href="phase3_bootstrap/stage2/chapter.html"><strong aria-hidden="true">5.</strong> Bootstrap Stage 2: Type Checker</a><a class="toggle"><div>‚ù±</div></a></li><li><ol class="section"><li class="chapter-item "><a href="phase3_bootstrap/stage2/bootstrap-010-type-environment.html"><strong aria-hidden="true">5.1.</strong> BOOTSTRAP-010: Type Environment</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage2/bootstrap-011-unification.html"><strong aria-hidden="true">5.2.</strong> BOOTSTRAP-011: Unification Algorithm</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage2/bootstrap-012-algorithm-w.html"><strong aria-hidden="true">5.3.</strong> BOOTSTRAP-012: Algorithm W</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage2/bootstrap-013-self-typing.html"><strong aria-hidden="true">5.4.</strong> BOOTSTRAP-013: Self-Typing Test</a></li></ol></li><li class="chapter-item expanded "><a href="phase3_bootstrap/stage3/chapter.html"><strong aria-hidden="true">6.</strong> Bootstrap Stage 3: Code Generator</a><a class="toggle"><div>‚ù±</div></a></li><li><ol class="section"><li class="chapter-item "><a href="phase3_bootstrap/stage3/bootstrap-014-typescript.html"><strong aria-hidden="true">6.1.</strong> BOOTSTRAP-014: TypeScript Emitter</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage3/bootstrap-015-rust.html"><strong aria-hidden="true">6.2.</strong> BOOTSTRAP-015: Rust Emitter</a></li><li class="chapter-item "><a href="phase3_bootstrap/stage3/bootstrap-016-self-compilation.html"><strong aria-hidden="true">6.3.</strong> BOOTSTRAP-016: Self-Compilation</a></li></ol></li><li class="chapter-item expanded "><li class="part-title">Phase 4: Debugging Tools - UPDATED! üèÜ</li><li class="chapter-item expanded "><a href="phase4_debugger/interactive-debugging-guide.html"><strong aria-hidden="true">7.</strong> Interactive Debugging: REPL, Notebooks, and IDE Integration</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-001-dap-server-skeleton.html"><strong aria-hidden="true">8.</strong> DEBUGGER-001: DAP Server Skeleton</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-002-breakpoint-management.html"><strong aria-hidden="true">9.</strong> DEBUGGER-002: Breakpoint Management</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-003-execution-control.html"><strong aria-hidden="true">10.</strong> DEBUGGER-003: Execution Control</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-004-parse-stack-inspection.html"><strong aria-hidden="true">11.</strong> DEBUGGER-004: Parse Stack Inspection</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-005-ast-visualization.html"><strong aria-hidden="true">12.</strong> DEBUGGER-005: AST Visualization</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-006-parse-tree-diff.html"><strong aria-hidden="true">13.</strong> DEBUGGER-006: Parse Tree Diff</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-007-execution-recording.html"><strong aria-hidden="true">14.</strong> DEBUGGER-007: Execution Recording</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-008-time-travel-navigation.html"><strong aria-hidden="true">15.</strong> DEBUGGER-008: Time-Travel Navigation</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-009-deterministic-replay.html"><strong aria-hidden="true">16.</strong> DEBUGGER-009: Deterministic Replay</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-010-type-error-visualization.html"><strong aria-hidden="true">17.</strong> DEBUGGER-010: Type Error Visualization</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-011-scope-inspector.html"><strong aria-hidden="true">18.</strong> DEBUGGER-011: Scope Inspector</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-012-call-stack-visualization.html"><strong aria-hidden="true">19.</strong> DEBUGGER-012: Call Stack Visualization</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-041-stack-profiler.html"><strong aria-hidden="true">20.</strong> DEBUGGER-041: Stack Depth Profiler + BUG-041 Fix</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-042-pathological-detector.html"><strong aria-hidden="true">21.</strong> DEBUGGER-042: Pathological Input Detector + BUG-042 Fix</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-043-regression-hang-detector.html"><strong aria-hidden="true">22.</strong> DEBUGGER-043: Regression &amp; Hang Detector</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-044-property-based-testing.html"><strong aria-hidden="true">23.</strong> DEBUGGER-044: Property-Based Testing Infrastructure</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-046-repl-debugger.html"><strong aria-hidden="true">24.</strong> DEBUGGER-046: Interactive REPL Debugger</a></li><li class="chapter-item expanded "><a href="phase4_debugger/debugger-047-performance-profiler.html"><strong aria-hidden="true">25.</strong> DEBUGGER-047: Performance Profiler with Flame Graphs</a></li><li class="chapter-item expanded "><a href="debugging/chapter.html"><strong aria-hidden="true">26.</strong> Debugging Toolkit</a><a class="toggle"><div>‚ù±</div></a></li><li><ol class="section"><li class="chapter-item "><a href="debugging/debug-001-source-maps-red.html"><strong aria-hidden="true">26.1.</strong> DEBUG-001: Source Map Generation (RED Phase)</a></li><li class="chapter-item "><a href="debugging/debug-001-source-maps-green.html"><strong aria-hidden="true">26.2.</strong> DEBUG-001: Source Map Generation (GREEN Phase)</a></li><li class="chapter-item "><a href="debugging/debug-008-record-replay-red.html"><strong aria-hidden="true">26.3.</strong> DEBUG-008: Record-Replay Engine (RED Phase)</a></li><li class="chapter-item "><a href="debugging/debug-008-record-replay-green.html"><strong aria-hidden="true">26.4.</strong> DEBUG-008: Record-Replay Engine (GREEN Phase)</a></li><li class="chapter-item "><a href="debugging/debug-integration-success.html"><strong aria-hidden="true">26.5.</strong> DEBUG-INTEGRATION: Production Integration Success</a></li></ol></li><li class="chapter-item expanded "><li class="part-title">Phase 5: Interpreter Testing - COMPLETE! üéØ</li><li class="chapter-item expanded "><a href="phase5_interpreter/interp-029-fuzzing.html"><strong aria-hidden="true">27.</strong> INTERP-029: Fuzzing Integration &amp; Coverage Analysis</a></li><li class="chapter-item expanded "><a href="phase5_interpreter/interp-030-benchmarking.html"><strong aria-hidden="true">28.</strong> INTERP-030: Performance Profiling &amp; Benchmarking</a></li><li class="chapter-item expanded "><a href="phase5_interpreter/interp-031-memory-safety.html"><strong aria-hidden="true">29.</strong> INTERP-031: Memory Safety Validation</a></li><li class="chapter-item expanded "><a href="phase5_interpreter/interp-033-bug-taxonomy.html"><strong aria-hidden="true">30.</strong> INTERP-033: Bug Taxonomy &amp; Comprehensive Analysis</a></li><li class="chapter-item expanded "><a href="phase5_interpreter/interp-099-integration.html"><strong aria-hidden="true">31.</strong> INTERP-099: Comprehensive Integration Test Suite</a></li><li class="chapter-item expanded "><a href="phase5_interpreter/quality-001-meta-tests.html"><strong aria-hidden="true">32.</strong> QUALITY-001: Test Infrastructure Meta-Validation</a></li><li class="chapter-item expanded affix "><li class="part-title">Discoveries</li><li class="chapter-item expanded "><a href="discoveries/runtime-enhancements.html"><strong aria-hidden="true">33.</strong> Runtime Enhancements</a></li><li class="chapter-item expanded "><a href="discoveries/boundaries.html"><strong aria-hidden="true">34.</strong> Language Boundaries</a></li></ol>';
        // Set the current, active page, and reveal it if it's hidden
        let current_page = document.location.href.toString().split("#")[0].split("?")[0];
        if (current_page.endsWith("/")) {
            current_page += "index.html";
        }
        var links = Array.prototype.slice.call(this.querySelectorAll("a"));
        var l = links.length;
        for (var i = 0; i < l; ++i) {
            var link = links[i];
            var href = link.getAttribute("href");
            if (href && !href.startsWith("#") && !/^(?:[a-z+]+:)?\/\//.test(href)) {
                link.href = path_to_root + href;
            }
            // The "index" page is supposed to alias the first chapter in the book.
            if (link.href === current_page || (i === 0 && path_to_root === "" && current_page.endsWith("/index.html"))) {
                link.classList.add("active");
                var parent = link.parentElement;
                if (parent && parent.classList.contains("chapter-item")) {
                    parent.classList.add("expanded");
                }
                while (parent) {
                    if (parent.tagName === "LI" && parent.previousElementSibling) {
                        if (parent.previousElementSibling.classList.contains("chapter-item")) {
                            parent.previousElementSibling.classList.add("expanded");
                        }
                    }
                    parent = parent.parentElement;
                }
            }
        }
        // Track and set sidebar scroll position
        this.addEventListener('click', function(e) {
            if (e.target.tagName === 'A') {
                sessionStorage.setItem('sidebar-scroll', this.scrollTop);
            }
        }, { passive: true });
        var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');
        sessionStorage.removeItem('sidebar-scroll');
        if (sidebarScrollTop) {
            // preserve sidebar scroll position when navigating via links within sidebar
            this.scrollTop = sidebarScrollTop;
        } else {
            // scroll sidebar to current active section when navigating via "next/previous chapter" buttons
            var activeSection = document.querySelector('#sidebar .active');
            if (activeSection) {
                activeSection.scrollIntoView({ block: 'center' });
            }
        }
        // Toggle buttons
        var sidebarAnchorToggles = document.querySelectorAll('#sidebar a.toggle');
        function toggleSection(ev) {
            ev.currentTarget.parentElement.classList.toggle('expanded');
        }
        Array.from(sidebarAnchorToggles).forEach(function (el) {
            el.addEventListener('click', toggleSection);
        });
    }
}
window.customElements.define("mdbook-sidebar-scrollbox", MDBookSidebarScrollbox);
